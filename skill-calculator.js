function ChangeLayer(value, id) {
  var el = document.getElementById(id + "_max")
  if (value == 0) {
    el.style.visibility = "hidden"
    el.value = ""
  } else {
    el.style.visibility = "visible"
  }
}

/**
 * JsHttpRequest: JavaScript "AJAX" data loader (script support only!)
 * Minimized version: see debug directory for the complete one.
 *
 * @license LGPL
 * @author Dmitry Koterov, http://en.dklab.ru/lib/JsHttpRequest/
 * @version 5.x $Id$
 */
function JsHttpRequest() {
  this.onreadystatechange = null
  this.readyState = 0
  this.responseText = null
  this.responseXML = null
  this.status = 200
  this.statusText = "OK"
  this.responseJS = null
  this.caching = false
  this.loader = null
  this.session_name = "PHPSESSID"
  this._ldObj = null
  this._reqHeaders = []
  this._openArgs = null
  this._errors = {
    inv_form_el: "Invalid FORM element detected: name=%, tag=%",
    must_be_single_el: "If used, <form> must be a single HTML element in the list.",
    js_invalid: "JavaScript code generated by backend is invalid!\n%",
    url_too_long: "Cannot use so long query with GET request (URL is larger than % bytes)",
    unk_loader: "Unknown loader: %",
    no_loaders: "No loaders registered at all, please check JsHttpRequest.LOADERS array",
    no_loader_matched: "Cannot find a loader which may process the request. Notices are:\n%",
  }
  this.abort = function () {
    if (this._ldObj && this._ldObj.abort) {
      this._ldObj.abort()
    }
    this._cleanup()
    if (this.readyState == 0) {
      return
    }
    if (this.readyState == 1 && !this._ldObj) {
      this.readyState = 0
      return
    }
    this._changeReadyState(4, true)
  }
  this.open = function (_2, _3, _4, _5, _6) {
    if (_3.match(/^((\w+)\.)?(GET|POST)\s+(.*)/i)) {
      this.loader = RegExp.$2 ? RegExp.$2 : null
      _2 = RegExp.$3
      _3 = RegExp.$4
    }
    try {
      if (
        document.location.search.match(new RegExp("[&?]" + this.session_name + "=([^&?]*)")) ||
        document.cookie.match(new RegExp("(?:;|^)\\s*" + this.session_name + "=([^;]*)"))
      ) {
        _3 += (_3.indexOf("?") >= 0 ? "&" : "?") + this.session_name + "=" + this.escape(RegExp.$1)
      }
    } catch (e) {}
    this._openArgs = {
      method: (_2 || "").toUpperCase(),
      url: _3,
      asyncFlag: _4,
      username: _5 != null ? _5 : "",
      password: _6 != null ? _6 : "",
    }
    this._ldObj = null
    this._changeReadyState(1, true)
    return true
  }
  this.send = function (_7) {
    if (!this.readyState) {
      return
    }
    this._changeReadyState(1, true)
    this._ldObj = null
    var _8 = []
    var _9 = []
    if (!this._hash2query(_7, null, _8, _9)) {
      return
    }
    var _a = null
    if (this.caching && !_9.length) {
      _a =
        this._openArgs.username +
        ":" +
        this._openArgs.password +
        "@" +
        this._openArgs.url +
        "|" +
        _8 +
        "#" +
        this._openArgs.method
      var _b = JsHttpRequest.CACHE[_a]
      if (_b) {
        this._dataReady(_b[0], _b[1])
        return false
      }
    }
    var _c = (this.loader || "").toLowerCase()
    if (_c && !JsHttpRequest.LOADERS[_c]) {
      return this._error("unk_loader", _c)
    }
    var _d = []
    var _e = JsHttpRequest.LOADERS
    for (var _f in _e) {
      var ldr = _e[_f].loader
      if (!ldr) {
        continue
      }
      if (_c && _f != _c) {
        continue
      }
      var _11 = new ldr(this)
      JsHttpRequest.extend(_11, this._openArgs)
      JsHttpRequest.extend(_11, {
        queryText: _8.join("&"),
        queryElem: _9,
        id: new Date().getTime() + "" + JsHttpRequest.COUNT++,
        hash: _a,
        span: null,
      })
      var _12 = _11.load()
      if (!_12) {
        this._ldObj = _11
        JsHttpRequest.PENDING[_11.id] = this
        return true
      }
      if (!_c) {
        _d[_d.length] = "- " + _f.toUpperCase() + ": " + this._l(_12)
      } else {
        return this._error(_12)
      }
    }
    return _f ? this._error("no_loader_matched", _d.join("\n")) : this._error("no_loaders")
  }
  this.getAllResponseHeaders = function () {
    return this._ldObj && this._ldObj.getAllResponseHeaders ? this._ldObj.getAllResponseHeaders() : []
  }
  this.getResponseHeader = function (_13) {
    return this._ldObj && this._ldObj.getResponseHeader ? this._ldObj.getResponseHeader(_13) : null
  }
  this.setRequestHeader = function (_14, _15) {
    this._reqHeaders[this._reqHeaders.length] = [_14, _15]
  }
  this._dataReady = function (_16, js) {
    if (this.caching && this._ldObj) {
      JsHttpRequest.CACHE[this._ldObj.hash] = [_16, js]
    }
    this.responseText = this.responseXML = _16
    this.responseJS = js
    if (js !== null) {
      this.status = 200
      this.statusText = "OK"
    } else {
      this.status = 500
      this.statusText = "Internal Server Error"
    }
    this._changeReadyState(2)
    this._changeReadyState(3)
    this._changeReadyState(4)
    this._cleanup()
  }
  this._l = function (_18) {
    var i = 0,
      p = 0,
      msg = this._errors[_18[0]]
    while ((p = msg.indexOf("%", p)) >= 0) {
      var a = _18[++i] + ""
      msg = msg.substring(0, p) + a + msg.substring(p + 1, msg.length)
      p += 1 + a.length
    }
    return msg
  }
  this._error = function (msg) {
    msg = this._l(typeof msg == "string" ? arguments : msg)
    msg = "JsHttpRequest: " + msg
    if (!window.Error) {
      throw msg
    } else {
      if (new Error(1, "test").description == "test") {
        throw new Error(1, msg)
      } else {
        throw new Error(msg)
      }
    }
  }
  this._hash2query = function (_1e, _1f, _20, _21) {
    if (_1f == null) {
      _1f = ""
    }
    if (("" + typeof _1e).toLowerCase() == "object") {
      var _22 = false
      if (_1e && _1e.parentNode && _1e.parentNode.appendChild && _1e.tagName && _1e.tagName.toUpperCase() == "FORM") {
        _1e = { form: _1e }
      }
      for (var k in _1e) {
        var v = _1e[k]
        if (v instanceof Function) {
          continue
        }
        var _25 = _1f ? _1f + "[" + this.escape(k) + "]" : this.escape(k)
        var _26 = v && v.parentNode && v.parentNode.appendChild && v.tagName
        if (_26) {
          var tn = v.tagName.toUpperCase()
          if (tn == "FORM") {
            _22 = true
          } else {
            if (tn == "INPUT" || tn == "TEXTAREA" || tn == "SELECT") {
            } else {
              return this._error("inv_form_el", v.name || "", v.tagName)
            }
          }
          _21[_21.length] = { name: _25, e: v }
        } else {
          if (v instanceof Object) {
            this._hash2query(v, _25, _20, _21)
          } else {
            if (v === null) {
              continue
            }
            if (v === true) {
              v = 1
            }
            if (v === false) {
              v = ""
            }
            _20[_20.length] = _25 + "=" + this.escape("" + v)
          }
        }
        if (_22 && _21.length > 1) {
          return this._error("must_be_single_el")
        }
      }
    } else {
      _20[_20.length] = _1e
    }
    return true
  }
  this._cleanup = function () {
    var _28 = this._ldObj
    if (!_28) {
      return
    }
    JsHttpRequest.PENDING[_28.id] = false
    var _29 = _28.span
    if (!_29) {
      return
    }
    _28.span = null
    var _2a = () => {
      _29.parentNode.removeChild(_29)
    }
    JsHttpRequest.setTimeout(_2a, 50)
  }
  this._changeReadyState = function (s, _2c) {
    if (_2c) {
      this.status = this.statusText = this.responseJS = null
      this.responseText = ""
    }
    this.readyState = s
    if (this.onreadystatechange) {
      this.onreadystatechange()
    }
  }
  this.escape = (s) => escape(s).replace(/\+/g, "%2B")
}
JsHttpRequest.COUNT = 0
JsHttpRequest.MAX_URL_LEN = 2000
JsHttpRequest.CACHE = {}
JsHttpRequest.PENDING = {}
JsHttpRequest.LOADERS = {}
JsHttpRequest._dummy = () => {}
JsHttpRequest.TIMEOUTS = { s: window.setTimeout, c: window.clearTimeout }
JsHttpRequest.setTimeout = (_2e, dt) => {
  window.JsHttpRequest_tmp = JsHttpRequest.TIMEOUTS.s
  if (typeof _2e == "string") {
    var tempId1 = window.JsHttpRequest_tmp(_2e, dt)
  } else {
    var tempId2 = null
    var _31 = () => {
      _2e()
      delete JsHttpRequest.TIMEOUTS[tempId2]
    }
    tempId2 = window.JsHttpRequest_tmp(_31, dt)
    JsHttpRequest.TIMEOUTS[tempId2] = _31
  }
  window.JsHttpRequest_tmp = null
  return tempId2
}
JsHttpRequest.clearTimeout = (id) => {
  window.JsHttpRequest_tmp = JsHttpRequest.TIMEOUTS.c
  delete JsHttpRequest.TIMEOUTS[id]
  var r = window.JsHttpRequest_tmp(id)
  window.JsHttpRequest_tmp = null
  return r
}
JsHttpRequest.query = function (url, _35, _36, _37) {
  var req = new this()
  req.caching = !_37
  req.onreadystatechange = () => {
    if (req.readyState == 4) {
      _36(req.responseJS, req.responseText)
    }
  }
  req.open(null, url, true)
  req.send(_35)
}
JsHttpRequest.dataReady = function (d) {
  var th = this.PENDING[d.id]
  delete this.PENDING[d.id]
  if (th) {
    th._dataReady(d.text, d.js)
  } else {
    if (th !== false) {
      throw "dataReady(): unknown pending id: " + d.id
    }
  }
}
JsHttpRequest.extend = (_3b, src) => {
  for (var k in src) {
    _3b[k] = src[k]
  }
}
JsHttpRequest.LOADERS.script = {
  loader: function (req) {
    JsHttpRequest.extend(req._errors, {
      script_only_get: "Cannot use SCRIPT loader: it supports only GET method",
      script_no_form: "Cannot use SCRIPT loader: direct form elements using and uploading are not implemented",
    })
    this.load = function () {
      if (this.queryText) {
        this.url += (this.url.indexOf("?") >= 0 ? "&" : "?") + this.queryText
      }
      this.url += (this.url.indexOf("?") >= 0 ? "&" : "?") + "JsHttpRequest=" + this.id + "-" + "script"
      this.queryText = ""
      if (!this.method) {
        this.method = "GET"
      }
      if (this.method !== "GET") {
        return ["script_only_get"]
      }
      if (this.queryElem.length) {
        return ["script_no_form"]
      }
      if (this.url.length > JsHttpRequest.MAX_URL_LEN) {
        return ["url_too_long", JsHttpRequest.MAX_URL_LEN]
      }
      var d = document,
        s = null,
        b = d.body
      if (!window.opera) {
        this.span = s = d.createElement("SCRIPT")
        var _43 = () => {
          s.language = "JavaScript"
          if (s.setAttribute) {
            s.setAttribute("src", this.url)
          } else {
            s.src = this.url
          }
          b.insertBefore(s, b.lastChild)
        }
      } else {
        this.span = s = d.createElement("SPAN")
        s.style.display = "none"
        b.insertBefore(s, b.lastChild)
        s.innerHTML = "Workaround for IE.<s" + "cript></" + "script>"
        var _44 = () => {
          s = s.getElementsByTagName("SCRIPT")[0]
          s.language = "JavaScript"
          if (s.setAttribute) {
            s.setAttribute("src", this.url)
          } else {
            s.src = this.url
          }
        }
      }
      JsHttpRequest.setTimeout(_43, 10)
      return null
    }
  },
}

/*
  SortTable
  version 2
  7th April 2007
  Stuart Langridge, http://www.kryogenix.org/code/browser/sorttable/ */
var stIsIE = false
var sorttable = {
  init: () => {
    if (sorttable.init.done) return
    sorttable.init.done = true
    if (window._timer) clearInterval(window._timer)
    if (!document.createElement || !document.getElementsByTagName) return
    var tables = document.getElementsByTagName("table")
    for (var i = 0; i < tables.length; i++) {
      if (tables[i].className.search(/\bsortable\b/) != -1) {
        sorttable.makeSortable(tables[i])
      }
    }
  },
  makeSortable: (table) => {
    if (table.getElementsByTagName("thead").length == 0) {
      var the = document.createElement("thead")
      the.appendChild(table.rows[0])
      table.insertBefore(the, table.firstChild)
    }
    if (table.tHead == null) table.tHead = table.getElementsByTagName("thead")[0]
    if (table.tHead.rows.length != 1) return
    var sortbottomrows = []
    for (var i = 0; i < table.rows.length; i++) {
      if (table.rows[i].className.search(/\bsortbottom\b/) != -1) {
        sortbottomrows.push(table.rows[i])
      }
    }
    if (sortbottomrows.length > 0) {
      if (table.tFoot == null) {
        var tfo = document.createElement("tfoot")
        table.appendChild(tfo)
      }
      for (var j = 0; j < sortbottomrows.length; j++) {
        table.tFoot.appendChild(sortbottomrows[j])
      }
    }
    var headrow = table.tHead.rows[0].cells
    for (var k = 0; k < headrow.length; k++) {
      if (!headrow[k].className.match(/\bsorttable_nosort\b/)) {
        var mtch = headrow[k].className.match(/\bsorttable_([a-z0-9]+)\b/)
        var override = null
        if (mtch) {
          override = mtch[1]
        }
        if (mtch && typeof sorttable["sort_" + override] == "function") {
          headrow[k].sorttable_sortfunction = sorttable["sort_" + override]
        } else {
          headrow[k].sorttable_sortfunction = sorttable.guessType(table, k)
        }
        headrow[k].sorttable_columnindex = k
        headrow[k].sorttable_tbody = table.tBodies[0]
        headrow[k].addEventListener("click", function (e) {
          var sortfwdind_to_remove = document.getElementById("sorttable_sortfwdind")
          if (sortfwdind_to_remove) {
            sortfwdind_to_remove.parentNode.removeChild(sortfwdind_to_remove)
          }
          var sortrevind_to_remove = document.getElementById("sorttable_sortrevind")
          if (sortrevind_to_remove) {
            sortrevind_to_remove.parentNode.removeChild(sortrevind_to_remove)
          }

          if (this.className.search(/\bsorttable_sorted\b/) != -1) {
            sorttable.reverse(this.sorttable_tbody)
            this.className = this.className.replace("sorttable_sorted", "sorttable_sorted_reverse")

            var sortrevind = document.createElement("span")
            sortrevind.id = "sorttable_sortrevind"
            sortrevind.innerHTML = stIsIE ? '&nbsp<font face="webdings">5</font>' : "&nbsp;&#x25B4;"
            this.appendChild(sortrevind)
            return
          }
          if (this.className.search(/\bsorttable_sorted_reverse\b/) != -1) {
            sorttable.reverse(this.sorttable_tbody)
            this.className = this.className.replace("sorttable_sorted_reverse", "sorttable_sorted")

            var sortfwdind = document.createElement("span")
            sortfwdind.id = "sorttable_sortfwdind"
            sortfwdind.innerHTML = stIsIE ? '&nbsp<font face="webdings">6</font>' : "&nbsp;&#x25BE;"
            this.appendChild(sortfwdind)
            return
          }

          var theadrow = this.parentNode
          for (var l = 0; l < theadrow.childNodes.length; l++) {
            var cell = theadrow.childNodes[l]
            if (cell.nodeType == 1) {
              cell.className = cell.className.replace("sorttable_sorted_reverse", "")
              cell.className = cell.className.replace("sorttable_sorted", "")
            }
          }

          this.className += " sorttable_sorted"
          var sortfwdind1 = document.createElement("span")
          sortfwdind1.id = "sorttable_sortfwdind"
          sortfwdind1.innerHTML = stIsIE ? '&nbsp<font face="webdings">6</font>' : "&nbsp;&#x25BE;"
          this.appendChild(sortfwdind1)

          var row_array = []
          var col = this.sorttable_columnindex
          var rows = this.sorttable_tbody.rows
          for (var m = 0; m < rows.length; m++) {
            row_array.push([sorttable.getInnerText(rows[m].cells[col]), rows[m]])
          }
          row_array.sort(this.sorttable_sortfunction)

          var tb = this.sorttable_tbody
          for (var n = 0; n < row_array.length; n++) {
            tb.appendChild(row_array[n][1])
          }
          row_array = null
        })
      }
    }
  },
  guessType: (table, column) => {
    var sortfn = sorttable.sort_alpha
    for (var i = 0; i < table.tBodies[0].rows.length; i++) {
      var text = sorttable.getInnerText(table.tBodies[0].rows[i].cells[column])
      if (text != "") {
        if (text.match(/^-?[Ј$¤]?[\d,.]+%?$/)) {
          return sorttable.sort_numeric
        }
        var possdate = text.match(sorttable.DATE_RE)
        if (possdate) {
          var first = Number.parseInt(possdate[1])
          var second = Number.parseInt(possdate[2])
          if (first > 12) {
            return sorttable.sort_ddmm
          } else if (second > 12) {
            return sorttable.sort_mmdd
          } else {
            sortfn = sorttable.sort_ddmm
          }
        }
      }
    }
    return sortfn
  },
  getInnerText: (node) => {
    var hasInputs = typeof node.getElementsByTagName == "function" && node.getElementsByTagName("input").length
    if (node.getAttribute("sorttable_customkey") != null) {
      return node.getAttribute("sorttable_customkey")
    } else if (typeof node.textContent != "undefined" && !hasInputs) {
      return node.textContent.replace(/^\s+|\s+$/g, "")
    } else if (typeof node.innerText != "undefined" && !hasInputs) {
      return node.innerText.replace(/^\s+|\s+$/g, "")
    } else if (typeof node.text != "undefined" && !hasInputs) {
      return node.text.replace(/^\s+|\s+$/g, "")
    } else {
      switch (node.nodeType) {
        case 3:
          if (node.nodeName.toLowerCase() == "input") {
            return node.value.replace(/^\s+|\s+$/g, "")
          }
        case 4:
          return node.nodeValue.replace(/^\s+|\s+$/g, "")
          break
        case 1:
        case 11:
          var innerText = ""
          for (var i = 0; i < node.childNodes.length; i++) {
            innerText += sorttable.getInnerText(node.childNodes[i])
          }
          return innerText.replace(/^\s+|\s+$/g, "")
          break
        default:
          return ""
      }
    }
  },
  reverse: (tbody) => {
    var newrows = []
    for (var i = 0; i < tbody.rows.length; i++) {
      newrows.push(tbody.rows[i])
    }
    for (var j = newrows.length - 1; j >= 0; j--) {
      tbody.appendChild(newrows[j])
    }
    newrows = null
  },
  sort_numeric: (a, b) => {
    var aa = Number.parseFloat(a[0].replace(/[^0-9.-]/g, ""))
    if (isNaN(aa)) aa = 0
    var bb = Number.parseFloat(b[0].replace(/[^0-9.-]/g, ""))
    if (isNaN(bb)) bb = 0
    return aa - bb
  },
  sort_alpha: (a, b) => {
    if (a[0] == b[0]) return 0
    if (a[0] < b[0]) return -1
    return 1
  },
  sort_ddmm: (a, b) => {
    var mtch = a[0].match(sorttable.DATE_RE)
    var y = mtch[3]
    var m = mtch[2]
    var d = mtch[1]
    if (m.length == 1) m = "0" + m
    if (d.length == 1) d = "0" + d
    var dt1 = y + m + d
    mtch = b[0].match(sorttable.DATE_RE)
    y = mtch[3]
    var d2 = mtch[2]
    var m2 = mtch[1]
    if (m2.length == 1) m2 = "0" + m2
    if (d2.length == 1) d2 = "0" + d2
    var dt2 = y + m2 + d2
    if (dt1 == dt2) return 0
    if (dt1 < dt2) return -1
    return 1
  },
  sort_mmdd: (a, b) => {
    var mtch = a[0].match(sorttable.DATE_RE)
    var y = mtch[3]
    var d = mtch[2]
    var m = mtch[1]
    if (m.length == 1) m = "0" + m
    if (d.length == 1) d = "0" + d
    var dt1 = y + m + d
    mtch = b[0].match(sorttable.DATE_RE)
    y = mtch[3]
    var d2 = mtch[2]
    var m2 = mtch[1]
    if (m2.length == 1) m2 = "0" + m2
    if (d2.length == 1) d2 = "0" + d2
    var dt2 = y + m2 + d2
    if (dt1 == dt2) return 0
    if (dt1 < dt2) return -1
    return 1
  },
  shaker_sort: (list, comp_func) => {
    var b = 0
    var t = list.length - 1
    var swapped = true
    while (swapped) {
      swapped = false
      for (var i = b; i < t; ++i) {
        if (comp_func(list[i], list[i + 1]) > 0) {
          var tempRow1 = list[i]
          list[i] = list[i + 1]
          list[i + 1] = tempRow1
          swapped = true
        }
      }
      t--
      if (!swapped) break
      for (var j = t; j > b; --j) {
        if (comp_func(list[j], list[j - 1]) < 0) {
          var tempRow2 = list[j]
          list[j] = list[j - 1]
          list[j - 1] = tempRow2
          swapped = true
        }
      }
      b++
    }
  },
}
if (document.addEventListener) {
  document.addEventListener("DOMContentLoaded", sorttable.init, false)
}
if (/WebKit/i.test(navigator.userAgent)) {
  var _timer = setInterval(() => {
    if (/loaded|complete/.test(document.readyState)) {
      sorttable.init()
    }
  }, 10)
}
window.onload = sorttable.init

// Helper function to get element by ID
function $(id) {
  return document.getElementById(id)
}

// ============================================================================
// UNIVERSAL FACTION DETECTION SYSTEM
// ============================================================================

// Map of all 23 factions to their class names
const FACTION_MAP = {
  // Human
  'jadeon': 'jadeon',
  'vim': 'vim', 
  'skysong': 'skysong',
  'modo': 'modo',
  'lupin': 'lupin',
  'incense': 'incense',
  
  // Athan
  'arden': 'arden',
  'balo': 'balo',
  'rayan': 'rayan',
  'celan': 'celan',
  'forta': 'forta',
  'voida': 'voida',
  
  // Etherkin
  'psychea': 'psychea',
  'kytos': 'kytos',
  'hydran': 'hydran',
  'seira': 'seira',
  'gevrin': 'gevrin',
  'sylia': 'sylia',
  
  // Deikin
  'ceros': 'ceros',
  'imperia': 'imperia',
  'ashura': 'ashura',
  'zephyr': 'zephyr'
};

/**
 * Universal faction detection - works for all 23 factions
 */
function detectFaction() {
  console.log("[Universal] Detecting faction...");
  
  // Method 1: Detect from HTML filename
  const currentPage = window.location.pathname.split('/').pop().toLowerCase();
  console.log("[Universal] Current page:", currentPage);
  
  // Extract faction name from filename (e.g., "jadeon-skill-calculator.html" -> "jadeon")
  for (const faction in FACTION_MAP) {
    if (currentPage.includes(faction + '-skill-calculator')) {
      console.log("[Universal] Detected faction from filename:", faction);
      return faction;
    }
  }
  
  // Method 2: Detect from URL parameter
  const urlParams = new URLSearchParams(window.location.search);
  const urlFaction = urlParams.get('c');
  if (urlFaction && FACTION_MAP[urlFaction]) {
    console.log("[Universal] Detected faction from URL parameter:", urlFaction);
    return urlFaction;
  }
  
  // Method 3: Fallback - try to detect from data
  if (typeof window.st !== 'undefined') {
    // Check for Vim data
    if (st[218] && st[218].n === "Heavy Blow") {
      console.log("[Universal] Detected Vim from data");
      return 'vim';
    }
    // Add more data checks as you add more factions
  }
  
  // Method 4: Ultimate fallback
  console.log("[Universal] Using default faction: jadeon");
  return 'jadeon';
}

function checkScriptLoading() {
  console.log("[Universal] ===== Script Loading Diagnostics =====");

  // Check for data_pwi.js
  if (typeof window.si !== "undefined") {
    console.log("[Universal] ✓ data_pwi.js loaded successfully (si defined)");
  } else {
    console.error("[Universal] ✗ data_pwi.js NOT loaded (si undefined)");
  }

  // Check for lang_pwi.js
  if (typeof window.st !== "undefined") {
    console.log("[Universal] ✓ lang_pwi.js loaded successfully (st defined)");
  } else {
    console.error("[Universal] ✗ lang_pwi.js NOT loaded (st undefined)");
  }

  // Check for faction data file (informational)
  const detectedFaction = detectFaction();
  console.log("[Universal] Detected faction:", detectedFaction);
  
  // Check for calcmin.js
  if (typeof window.C !== "undefined") {
    console.log("[Universal] ✓ calcmin.js loaded successfully (C defined)");
  } else {
    console.error("[Universal] ✗ calcmin.js NOT loaded (C undefined)");
  }

  console.log("[Universal] =====================================");

  // Return true if all critical scripts are loaded
  return typeof window.si !== "undefined" && typeof window.st !== "undefined" && typeof window.C !== "undefined";
}

// Initialize calculator
function initCalculator() {
  console.log("[Universal] Attempting to initialize calculator...");

  if (!checkScriptLoading()) {
    console.error("[Universal] Cannot initialize calculator - required scripts not loaded");
    console.error("[Universal] TROUBLESHOOTING:");
    console.error("[Universal] 1. Make sure data_pwi.js, lang_pwi.js, and faction data files are in the same directory");
    console.error("[Universal] 2. Try using a local web server instead of opening the file directly");
    console.error("[Universal] 3. Check browser console for script loading errors");
    console.error("[Universal] 4. Verify the data files don't have JavaScript syntax errors");
    return;
  }

  // Auto-detect the faction
  const className = detectFaction();
  console.log("[Universal] Initializing calculator for faction:", className);

  try {
    // Initialize the calculator with detected faction
    window.C.init(className);
    console.log("[Universal] Calculator initialized successfully for:", className);
    
    // Update page title to show current faction
    updatePageTitle(className);
  } catch (e) {
    console.error("[Universal] Calculator initialization failed:", e);
    console.error("[Universal] Error details:", e.message);
    
    // Show user-friendly error message
    showErrorMessage(className, e);
  }
}

/**
 * Update page title to reflect current faction
 */
function updatePageTitle(faction) {
  const factionName = faction.charAt(0).toUpperCase() + faction.slice(1);
  const titleElement = document.querySelector('.tableHeader.tup');
  if (titleElement) {
    titleElement.textContent = `Skill Calculator: ${factionName}`;
  }
}

/**
 * Show user-friendly error message
 */
function showErrorMessage(faction, error) {
  const content = document.getElementById("calculator-content");
  if (content) {
    const factionName = faction.charAt(0).toUpperCase() + faction.slice(1);
    content.innerHTML = `
      <div style="padding: 20px; background: #fee; border: 2px solid #c00; border-radius: 8px; margin: 20px;">
        <h3 style="color: #c00; margin-top: 0;">${factionName} Calculator Failed to Load</h3>
        <p><strong>Error:</strong> ${error.message || 'Unknown error'}</p>
        <p><strong>Troubleshooting steps:</strong></p>
        <ol>
          <li>Verify t${faction}_pwi.js file exists and is in the same directory</li>
          <li>Check the browser console (F12) for specific error messages</li>
          <li>Ensure the data file doesn't have JavaScript syntax errors</li>
          <li>Try refreshing the page</li>
        </ol>
        <p><em>Detected faction: ${faction}</em></p>
      </div>
    `;
  }
}

var initAttempts = 0;
var maxAttempts = 5;

function attemptInit() {
  initAttempts++;
  console.log("[Universal] Initialization attempt", initAttempts, "of", maxAttempts);

  if (checkScriptLoading()) {
    console.log("[Universal] All scripts loaded, initializing...");
    initCalculator();
  } else if (initAttempts < maxAttempts) {
    console.log("[Universal] Scripts not ready, retrying in 500ms...");
    setTimeout(attemptInit, 500);
  } else {
    console.error("[Universal] Failed to load required scripts after", maxAttempts, "attempts");
    
    const content = document.getElementById("calculator-content");
    if (content) {
      const detectedFaction = detectFaction();
      content.innerHTML = `
        <div style="padding: 20px; background: #fee; border: 2px solid #c00; border-radius: 8px; margin: 20px;">
          <h3 style="color: #c00; margin-top: 0;">Calculator Failed to Load</h3>
          <p><strong>Required data files are missing or failed to load for ${detectedFaction}:</strong></p>
          <ul>
            <li>data_pwi.js</li>
            <li>lang_pwi.js</li>
            <li>t${detectedFaction}_pwi.js</li>
          </ul>
          <p><strong>Troubleshooting steps:</strong></p>
          <ol>
            <li>Verify all data files are in the same directory as this HTML file</li>
            <li>Use a local web server instead of opening the file directly</li>
            <li>Check the browser console (F12) for specific error messages</li>
            <li>Ensure the data files don't have JavaScript syntax errors</li>
          </ol>
          <p><em>Detected faction: ${detectedFaction}</em></p>
        </div>
      `;
    }
  }
}

// Main initialization
document.addEventListener("DOMContentLoaded", () => {
  console.log("[Universal] DOM loaded - starting universal initialization sequence");
  attemptInit();
});

// Fallback initialization on window load
window.addEventListener("load", () => {
  console.log("[Universal] Window load event fired");
  // Only attempt if we haven't succeeded yet
  if (!window.C || !window.C.rr) {
    console.log("[Universal] Calculator not initialized, attempting fallback...");
    setTimeout(attemptInit, 100);
  } else {
    console.log("[Universal] Calculator already initialized");
  }
});

// Function to replace forEach and dean_addEvent
function forEach(array, callback) {
  for (var i = 0; i < array.length; i++) {
    callback(array[i], i, array);
  }
}

function dean_addEvent(element, event, handler) {
  if (element.addEventListener) {
    element.addEventListener(event, handler, false);
  } else if (element.attachEvent) {
    element.attachEvent("on" + event, handler);
  } else {
    element["on" + event] = handler;
  }
}